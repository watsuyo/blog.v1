<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://watsuyo.dev</id>
    <title>watsuyo.dev</title>
    <updated>2021-09-20T09:56:58.493Z</updated>
    <generator>Next.js using Feed for Node.js</generator>
    <author>
        <name>watsuyo</name>
        <email>dmwtpdmwtp24@gmail.com</email>
        <uri>https://twitter.com/watsuyo_2</uri>
    </author>
    <link rel="alternate" href="https://watsuyo.dev"/>
    <link rel="self" href="https://watsuyo.dev/rss/atom.xml"/>
    <subtitle>@watsuyoのブログサイトです. JavaScript,Vue.js,React.js,Nuxt.js,Next.js,UI/UX,デザイン、フロントエンドに関して投稿します. This is @watsuyo's blog.I post about JavaScript, Vue.js, React.js, Nuxt.js, Next.js, UI/UX,Design,Front-End.</subtitle>
    <logo>https://pbs.twimg.com/profile_images/1339430665792626689/8cE0aCDB_400x400.jpg</logo>
    <icon>https://pbs.twimg.com/profile_images/1339430665792626689/8cE0aCDB_400x400.jpg</icon>
    <rights>© 2021 watsuyo</rights>
    <entry>
        <title type="html"><![CDATA[2021年9月現在のデザインシステム事例をまとめてみた]]></title>
        <id>https://watsuyo.dev/blog/design-system-matome</id>
        <link href="https://watsuyo.dev/blog/design-system-matome"/>
        <updated>2021-09-19T15:00:00.000Z</updated>
        <summary type="html"><![CDATA[ここ最近、企業におけるデザインシステムの事例を公開したブログや資料をTwitterで多く公開されています。 あまりの多さに、追いきれて...]]></summary>
        <content type="html"><![CDATA[
# 2021年9月現在のデザインシステム事例をまとめてみた

ここ最近、企業におけるデザインシステムの事例を公開したブログや資料をTwitterで多く公開されています。
あまりの多さに、追いきれていなかったので個人用にもまとめておこうと思い、記事を書いています。

## サイバーエージェント - [Amebaのデザインシステム「Spindle」の全貌公開](https://developers.cyberagent.co.jp/blog/archives/31641/?s=09&utm_source=pocket_mylist)

サイバーエージェントがAmeba事業で公開しているデザインシステム「Spindle」を公開しました。

デザインシステム「Spindle」には、Amebaのビジョンである「100年愛されるメディアを創る」を元に実装されています。

> Amebaはビジョンとして「100年愛されるメディアを創る」を掲げています。

> ということは100年続くサービスでなければいけませんし、そのためには時代に合わせたアップデートしないといけません。

> 事業として停滞させず、継続的に成長し続けるためにはとても重要なことです。

> こうした考えが15周年の節目で事業的にも見直す機会となり、ブランドをアップデートするというプロジェクトが動きました。

「Spindle」は、ビジョンを軸にドキュメントスタイルガイド等を一括管理されたデザインシステムになっています。

> – ブランドやデザイン原則などのドキュメント

> – 具体的な表現や振る舞いのためのスタイルガイド

> – デザインツールや、実装コードに落とし込まれたコンポーネントライブラリ

> ただアウトプットとしてこれらがすべて揃ってはじめてデザインシステムと呼ぶのかは組織によっても違いますが、Amebaの場合はこれらを包括したものを目指しました。

また、"デザインシステム"を

> プロダクトとサービス全体を対象にした「設計」としてのデザイン

と捉え、デザイナーやエンジニアだけに価値のあるものにならないような仕組みにしているそうです。

> 「デザイン」「システム」という言葉から、デザイナーあるいはデザイナーによるデザイン業務や、あるいはエンジニアのための何かと思われることもあります。そうではなく、プロダクトとサービス全体を対象にした「設計」としてのデザインと考え、「体験の一貫性」を効率よく設計するために、職種としてのデザイナー以外にも意味のあるものとしています。

> Amebaのデザインシステムは言い換えるならば「Amebaを作るすべての人が、Amebaらしさを伝えるため約束事や、それを手助けするツールやガイドラインが揃ったデザインする仕組み」といえます。

「Spindle」という名前はに関しては、あえてキャッチーな名前を付けることで、コンセプトを体現し、組織の文化に根付かせる狙いがあるそうです。

> デザインシステムに名前をつける、というのは最重要ではないかもしれませんが、コンセプトを表した名前のようなものはチームのアイデンティティにもなりますし、デザインシステムの浸透にあたっても「デザインシステム」よりもキャッチーな名前にしておくというのは戦略的には良いと感じています。少なくともこうした名前を持ったプロジェクトのようにしてしまうのは、私たちの会社の文化としても適切でした。

記事の中では、デザインシステムを設計や実装しているメンバーは皆、プロジェクトの掛け持ちをしていると紹介されています。
通常のプロジェクトに与えるデメリットよりも、現場のニーズを拾いやすいメリットの方が多いと考え、このような体制を敷いているそうです。

> こうした横断的な活動において専任ではなく「掛け持ち」というのは事業優先度などの兼ね合いで活動がおろそかになるというアンチパターンもありますが、むしろ現場にいることで課題やニーズを拾えますし、当人が実感してその解決に取り組むきっかけにもなっています。

「Spindle」を公開する理由に関しては、外部に対してデザインに対する姿勢の発信によるブランディングの向上と採用効果が見込まれ、またドキュメント質を保つため狙いもあるそうです。

> 例えばプラットフォームサービスであれば、サードパーティの開発者向けに公開する意味はあります。他にはデザインシステムが存在すること、あるいはそこに現れるその企業のデザインへの姿勢なども見られることから、採用の効果もあるでしょう。

> Spindleの場合は、後者の採用目的も含めて「ブランディング」が今回にあるため、公開することに価値があると考えています。他には外部のパートナーに協力いただくような場合にも参照してもらいやすいのも利点といえるでしょう。また副次的ですが一般公開されていることを意識することによってドキュメントの質を維持するという効果もあります。

記事内でも紹介されている、[Ameba 進化するためのブランド戦略](https://speakerdeck.com/toshiharutakemoto/ameba-jin-hua-surutamefalseburandozhan-lue)にも、「Spindle」に関する情報が記載されています。

## その他の参考記事
- [「Ameba」15年の負債を払拭するカラーパレットのメソッド](https://developers.cyberagent.co.jp/blog/archives/26754/)
- [「Ameba」アイコン刷新　一貫性と再現性追求のための設計術](https://developers.cyberagent.co.jp/blog/archives/30048/)
- [Spindle](https://spindle.ameba.design)


<!-- ## メモ
- carely-tableの展開による、デザインシステムにおける成功体験を得た
- carely-modalは、粒度の細かいコンポーネントの設計実装が絡む
- 指針を決めて、枠組みの中で実装をする
- 他部署や外部に向けて認知されるには、いつでもどこでもデザインシステムについて触れることのできる場所が必要 -->
]]></content>
        <author>
            <name>watsuyo</name>
            <email>dmwtpdmwtp24@gmail.com</email>
            <uri>https://twitter.com/watsuyo_2</uri>
        </author>
        <contributor>
            <name>watsuyo</name>
            <email>dmwtpdmwtp24@gmail.com</email>
            <uri>https://twitter.com/watsuyo_2</uri>
        </contributor>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.jsとMDXで個人ブログを作ってみた]]></title>
        <id>https://watsuyo.dev/blog/nextjs-mdx-1</id>
        <link href="https://watsuyo.dev/blog/nextjs-mdx-1"/>
        <updated>2021-09-17T15:00:00.000Z</updated>
        <summary type="html"><![CDATA[この記事を読むと誰でも自前の個人ブログを作れるようになることを目指します。(記事のボリュームが想像以上に大きくなったので分割する予定...]]></summary>
        <content type="html"><![CDATA[
# Next.jsとMDXで個人ブログを作ってみた

## この記事の目標

この記事を読むと誰でも自前の個人ブログを作れるようになることを目指します。(記事のボリュームが想像以上に大きくなったので分割する予定です。)

個人ブログや企業のエンジニアブログのようなものを簡単に作ることができます。

Markdownファイルを、HTMLに変換してWeb上に公開することになるので、実装コードと一緒に記事のMarkdownファイルをGit管理することができます。

## 技術スタックと開発環境

- Next.js 14系
- TypeScript 4.4系
- MDX(MarkdownをHTML化)
- Vercel(デプロイサーバー)
- MaxOS Big Sir 11.5.2

## なんで作ったか？

最新技術で日々メンテナンスが出来るものが作りたかったのが大きいかなと思います。

個人ブログのメインユーザーは、自分自身でありブログを読んでくださる方なので、エンジニアが作るWebサービスの個人開発にも似たような感覚です。

Next.jsを使って見たかったといえば、それまでですが、SSGなWebサイトは2020年代に入ってから特に注目されている分野ですし、試すなら今！みたいな所もありました。

QiitaやZennもありがたく利用していますが、どうしても"いいね"のような数字にとらわれる感じで胃もたれしがちなので、消化の良さそうな個人ブログで胃の中をスッキリさせていこうと思います。

普段はVue.jsを使うことがほとんどなので、React.jsを使うのはどうなの？という点については、全然問題ないです。

ドキュメントや先駆者のブログに大体の答えは書いてあります。

## なんでNext.jsにしたのか？

流行りのフレームワークの勉強をしたかったのと、大きな理由はSSG(Static Site Generation)できるからです。

静的なブログサイトを作るだけのためにSSRやSPAですと、初回レンダリングやSEOに課題があるため(改善方法はありますが)、要件を素早く解消してくれるNext.jsを選定しました。

またVercelへのデプロイと組み合わせると、Vercelの自動キャッシュ機能を利用することができ、デプロイごとに静的ファイルを自動でキャッシュしてくれます。詳細↓

https://vercel.com/docs/edge-network/caching

SSGの場合、初回レンダリングやパフォーマンスの面でも優れています。

軽く、SSGについて整理をします。

SSGの大きな特徴は、予めHTMLをレンダリングしておき、ユーザーからのリクエスト(画面遷移等)に応じて用意しておいたHTMLを返却するだけといったものです。

これがSSGで無い場合は、ユーザーからのリクエストの度にHTMLを生成して、それを返却する形式になっています。

今回はそのSSGで生成するHTMLを一部、Markdownからの変換されたHTMLでレンダリングするようにしています。

ブログ記事はMarkdownで記述し、所定のディレクトリに配置するだけでルーティングも良い感じにしてくれる実装を今回はしました。

## watsuyo.devのドメインはどうしたの？

domain.comで買いました。

欲しいドメイン名は初めから決めていたので、国内外のドメイン販売サービスを比較しながら一番安い所で買いました。

GitHubにmainブランチをPushすると、予め連携しておいたVercelのプロジェクトにDeployされます。

後はVecelとdomain.comにIPアドレスを設定するだけで、watsuyo.devにアクセスできます。

## 本題

### ローカルにプロジェクトを作成する

まずはローカルにNext.jsのプロジェクトを作成します。

今回はTypeScriptを使いたいので、TypeScriptのoptionをつけます。

```bash
$ yarn create next-app --typescript
```

デフォルトではpagesディレクトリがsrcディレクトリに入っていないので、srcディレクトリに移動をし、tsconfig.jsにあるエイリアスの設定も変更します。

```json
"compilerOptions": {
	"baseUrl": "src"
}
```

src以下は、現段階では以下のような構成になります。

src配下に配置するかしないかの判断基準は、画面実装に直接関係があるかで判断しています。

```
src
├── pages
│   ├── _app.tsx
│   ├── api
│   │   └── hello.ts
│   └── index.tsx
└── styles
    ├── Home.package.css
    └── globals.css
```

今後、共通コンポーネント作成した時には `components`といったディレクトリ配下にコンポーネントを配置して、`components`もsrc配下に配置するのが妥当かと思います。

以下は、今回の最終目標的な構成になります。

```
src
├── Head.tsx
├── components
│   ├── Footer.tsx
│   ├── Header.tsx
│   └── styled
│       ├── PostContainer.ts
│       ├── StyledAnchorLink.ts
│       ├── StyledCard.ts
│       └── StyledLink.ts
├── global.ts
├── logic
│   ├── getAllPosts.ts
│   └── style.ts
├── pages
│   ├── _app.tsx
│   ├── _documents.tsx
│   ├── blog
│   │   ├── [title].tsx
│   │   └── sample-blog
│   │       └── index.mdx
│   ├── index.tsx
└── type.ts
```

プロジェクト作成ができたら

```bash
$ yarn dev
```

でローカルサーバーを立ち上げます。

立ち上がったらブラウザで確認してみると、以下のような画面が表示されると思います。

![http://localhost:3000/](https://i.gyazo.com/731048b56c77bb2cc75491013675900a.png)

ひとまず、ブログを作る第一歩は完成しました。

適宜、commitをしておきましょう

次はpackageです。

初期の段階で以下のようなpackage.jsonになっていると思うので

```json
{
  略
  "dependencies": {
    "next": "11.1.2",
    "react": "17.0.2",
    "react-dom": "17.0.2"
  },
  "devDependencies": {
    "@types/react": "17.0.21",
    "eslint": "7.32.0",
    "eslint-config-next": "11.1.2",
    "typescript": "4.4.3"
  }
}
```

今回の開発で必要になるyarn packageをインストールします。

```json
{
　略
  "dependencies": {
    + "@emotion/styled": "^11.3.0",
    + "@theme-ui/presets": "^0.11.2",
    + "gray-matter": "^4.0.3",
    "next": "11.1.2",
    + "next-mdx-enhanced": "^5.0.0",
    + "next-mdx-remote": "^3.0.4",
    "react": "17.0.2",
    "react-dom": "17.0.2",
    + "react-icons": "^4.2.0",
    + "theme-ui": "^0.11.2"
  },
  "devDependencies": {
    "@types/react": "17.0.21",
    + "@typescript-eslint/eslint-plugin": "^4.30.0",
    + "@typescript-eslint/parser": "^4.30.0",
    + "babel-plugin-emotion": "^11.0.0",
    "eslint": "^7.32.0",
    "eslint-config-next": "11.1.2",
    + "eslint-config-prettier": "^8.3.0",
    + "eslint-plugin-react": "^7.25.1",
    + "eslint-plugin-react-hooks": "^4.2.0",
    + "prettier": "2.4.1",
    "typescript": "4.4.3"
  }
}
```

Markdownで書いたブログをHTML化するためにMDX関係のpackageを追加します。
今回はNextが提供している @next/mdx ではなく、next-mdx-enhanced を使用します。
[next-mdx-enhanced](https://github.com/hashicorp/next-mdx-enhanced)は、Next.jsがMDXを読み込んでHTML化してくれます。

[gray-matter](https://github.com/jonschlinkert/gray-matter)は、yaml形式で記述したブログの情報をJSオブジェクト形式に変換してくれます。

以下のようにブログの情報をymlで記述できます。

```md
---
title: 'Next.jsとMDXで個人ブログを作ってみた'
date: '2021/09/18'
description: 'コンテンツの内容'
---

# 本文
```

[next-mdx-remote](https://github.com/hashicorp/next-mdx-remote)は、getServerPropsやgetStaticPropsによって、Markdownを読み込むためのものです。

```bash
$ yarn next-mdx-enhanced next-mdx-remote gray-matter
```

今回は[@emotion/styled](https://github.com/emotion-js/emotion)を使用して、スタイルを当てたいと思います。

```bash
$ yarn add @emotion/styled
```

ダークモードを実装するのとPrismを使って、コードのsyntax highlightingを利用したいので、[theme-ui](https://github.com/system-ui/theme-ui)を追加します。

```bash
$ yarn add theme-ui @theme-ui/presets
```

Reactでiconを使いたいときはiconをコンポーネントとしてimportできる、[react-icons](https://github.com/react-icons/react-icons)が便利です。

```bash
$ yarn add react-icons
```

今回、開発で必要なyarn packageは以上ですが、お好みでESLintやprettierの設定をすると、開発体験を向上できるかと思います。

packageを入れ終わったら再度、yarn devで正しく表示されているかを確認してみましょう。

画面を更新するようなことはしていないと思うので、先ほどと同じ画面が表示されるはずです。

1つの記事で全て書き切ろうと思いましたが、ここまでかなりのボリュームになったので、続きは次回のブログにしようかなと思います。

次は早速、Markdownで書いたブログをHTML化して表示させてみます。

## 参考
- [Next.jsで作る技術ブログ [Part1 - セットアップ]](https://youtu.be/5obR4PzQObI)
- [Next.js + MDXでブログを作った](https://titanicrising.jp/blog/nextjs-mdx)
- [Next.js でブログを作り直した](https://queq1890.info/blog/new-blog)
- [Next.js + MDXでブログを作る 〜 Blanktarの場合](https://blanktar.jp/blog/2020/05/how-to-make-blog-with-nextjs)
- [Next.js + MDX で自分用ブログシステムを再構築した](https://blog.fohte.net/posts/2020-06-07-next-js-mdx)
]]></content>
        <author>
            <name>watsuyo</name>
            <email>dmwtpdmwtp24@gmail.com</email>
            <uri>https://twitter.com/watsuyo_2</uri>
        </author>
        <contributor>
            <name>watsuyo</name>
            <email>dmwtpdmwtp24@gmail.com</email>
            <uri>https://twitter.com/watsuyo_2</uri>
        </contributor>
    </entry>
    <entry>
        <title type="html"><![CDATA[2021年4月に産業技術大学院大学(AIIT)に入学しました🧑‍🎓]]></title>
        <id>https://watsuyo.dev/blog/student-engineer</id>
        <link href="https://watsuyo.dev/blog/student-engineer"/>
        <updated>2021-09-10T15:00:00.000Z</updated>
        <summary type="html"><![CDATA[2021年4月に産業技術大学院大学(以下 AIIT) 情報アーキテクチャコースに入学し、フルタイムのフロントエンドエンジニアとの2足のわらじを履いて...]]></summary>
        <content type="html"><![CDATA[
# 2021年4月に産業技術大学院大学(AIIT)に入学しました🧑‍🎓

## はじめに🎓

2021年4月に産業技術大学院大学(以下 AIIT) 情報アーキテクチャコースに入学し、フルタイムのフロントエンドエンジニアとの2足のわらじを履いています。

既に9月も中旬で、あと3週間で3Qの授業が始まるタイミングになってしまいましたが、個人ブログをNext.js + MDXで実装したタイミングで社会人大学院入学についてエントリを書くことにしました。

理由はわかりませんが今年に入って、社会人のエンジニアで大学や大学院の入試を受けている人が増えているような気がしています。

社会人でも通える大学や大学院がいくつかありますが、これから検討している方の参考になればいいと思います。

## 大学院に通おうと思った理由🏃‍♂️

一番大きいのは、情報系の学位、修士を取得できる部分に大きなメリットを感じたからです。

経営学部出身で独学でエンジニア実務経験も2年が経つタイミングで、そろそろ体系的に学びたいぞ、と思いました。

実務経験は、実績や成果として残すことができますが、資格として認めれられるために取得したいと考えていました。

今後のキャリアを考えると、海外で働くなら実務経験の他に情報系の学位、修士が必要であったり、プログラミングやWebや通信などの技術についてアカデミックに学ぶ機会が、高校3年生の段階で選択できなかった場合に途絶えてしまうのもちょっとつらいところがあります。

英語で授業を受けられる方は、海外に拠点があるオンライン大学を選択肢にいれることもできます。(国内にはないのかな..?)

新型コロナウイルスの影響で、AIITもオンライン授業にシフトしていて、このまま行くと1度も通学せずに卒業になりそうです。

話を戻すと、ライフパス的にも今が学び直す良い機会(20代後半)かなと思い、今後の自分の可能性を広げる意味でも、AIITへの入学を決断しました。

## AIITの情報アーキテクチャコースで学べること👨‍💻

学内には
- 情報アーキテクチャ
- 創造技術
- 事業設計工学
の3つのコースが用意されています。

各コースのイメージは、ざっくりと↓のような感じです。
- 情報アーキテクチャコースは、エンジニア向け
- 創造技術は、デザイナー向け
- 事業設計工学は、起業したい方、事業をやりたい方向け

もちろんそれぞれのコースには異業界、異業種の方が受講していたり、様々な目的を持っている方もいると思います。

そんな中、卒業単位に含まれるかは別として、多様なコースの授業を受けることが可能な部分も魅力的です。(受けすぎるとそれはそれでキツイ)

授業自体は月曜日から土曜日までの週6日で、カリキュラムの組み方によっては、もうちょっと少なかったりします。

また、授業は夜間にあるため、授業がある日はエンジニアとして勤務時間は8時半~17時半くらいまで就業し、18時半~21時40分は授業を受けるルーティンになっています。

8月中旬から9月末までは、学生としては夏休み期間でしたが10月から年末年始までは上記のようなルーティンになります。

## 情報系の授業を体系的に受けられる✏️

何かしらの手段で、仕事で使うようなフレームワークやプログラミング言語とは違った技術レイヤーを学びたいと思った時に、社会人大学院の存在を知りました。

2020年1月くらいに、大学院の説明会に行き、その年の12月に社会人特別入試に合格して、翌年4月に入学しました。

他にも社会人向けに展開している大学院は都内にも何個かあるのですが、様々なコースを授業を受けることができる点、都民優遇制度(学費補助など)を含めて都立大学院のため学費が安い点は魅力に映りました。

非情報系や非理系出身エンジニアにとって大きいのは、入試や授業に高度な数学知識を必須にしていない点で、データベースやクラウドインフラ周り、Ruby on RailsやJava、Pythonをアカデミック視点で学べるのも魅力です。

大学院なので2年間で、最後の1年間はPBL(Project Based Learning）科目があります。

ちなみに、**情報システム学修士**を取得できます。

専門職大学院という立ち位置なため、座学より実践！なカリキュラムも多い印象です。

そのため、年齢層は創造より+10くらいかもしれません。

それでも皆、勉強をして自分のキャリアにつなげたいという同じ目標を持っているので、年齢やバックボーンは気になりません。

オンライン授業ということもあって、グループワークで見た目の情報も少ないために変なバイアスがかかることもありません。

## AIIT以外の社会人でも情報系修士を取得できる大学、大学院
- JAIST(北陸先端科学技術大学院大学)
  - 正真正銘のコンピューターサイエンスが欲しい方はオススメ
- Uo People(University of the People)
  - 英語の授業がOKな方はオンラインで無料で受けられます。
  - 試験を受けるためにお金がかかります
- サイバー大学(オンライン)
  - ソフトバン
  - クグループが運営しており、福岡を拠点としています

それ以外にも
- 帝京大学(オンライン)
- 電通大(夜間)
などがあります。

結構、選択肢が多い印象なので、取得できる学位、修士や学べる内容や通学が必要かなどを照らし合わせながら選ぶと良いかもしれません。
## 勉強していること

ざっと前期に受けた授業を振り返ってみて、
### 1Q

- 情報セキュリティ特論
  - 暗号
  - セキュリティ評価
- 事業方向性設計特論
  - 事業ロードマッピング手法
- プロジェクト管理特論1
  - PMBOK ガイド
- Javaプログラミング技法
- フレームワーク開発特論
  - Ruby on Rails チュートリアル
### 2Q

- データベース特論
  - リレーショナルデータベースの基礎

- 人間中心デザイン特論
  - HCDの概念
  - ビジョン構想
  - ⾏動観察

- システムソフトウェア特論
  - Unix系OS
    - OSの仕組み
    - シェルスクリプトを使った実装

- システムプログラミング特論
  - Pythonを使った実装
    - I/O
    - アルゴリズム
    - 計算量を考慮した実装

の授業を受けました。

## 最後に

色々書きましたが、授業と業務の両立は、結構大変です。

学ぶ機会を強制的に作れるので、時間とお金があるエンジニアの皆さん、社会人大学院も検討してみるといいかもしれません。

高価な書籍を大学や系列の高専の図書館をレンタルできるのも嬉しい特典の一つです。

AIITや社会人大学院に興味のある方は、[Twitter](https://twitter.com/watsuyo_2)で相談にのるので、ご質問等でもお気軽にDMください👍

大学院のことについては、引き続きこのブログでも発信していきます。

P.S.
お得な学割サービスを知りたい。。
NotionとANC(オライリー本読み放題)は登録してます。
]]></content>
        <author>
            <name>watsuyo</name>
            <email>dmwtpdmwtp24@gmail.com</email>
            <uri>https://twitter.com/watsuyo_2</uri>
        </author>
        <contributor>
            <name>watsuyo</name>
            <email>dmwtpdmwtp24@gmail.com</email>
            <uri>https://twitter.com/watsuyo_2</uri>
        </contributor>
    </entry>
</feed>
