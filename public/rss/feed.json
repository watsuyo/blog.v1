{
    "version": "https://jsonfeed.org/version/1",
    "title": "watsuyo.dev",
    "home_page_url": "https://watsuyo.dev",
    "feed_url": "https://watsuyo.dev/rss/feed.json",
    "description": "@watsuyoのブログサイトです\b. JavaScript,Vue.js,React.js,Nuxt.js,Next.js,UI/UX,デザイン、フロントエンドに関して投稿します. This is @watsuyo's blog.I post about JavaScript, Vue.js, React.js, Nuxt.js, Next.js, UI/UX,Design,Front-End.",
    "icon": "https://pbs.twimg.com/profile_images/1339430665792626689/8cE0aCDB_400x400.jpg",
    "author": {
        "name": "watsuyo",
        "url": "https://twitter.com/watsuyo_2"
    },
    "items": [
        {
            "id": "https://watsuyo.dev/blog/nextjs-mdx-1",
            "content_html": "\n# Next.jsとMDXで個人ブログを作ってみた\n\n## この記事の目標\n\nこの記事を読むと誰でも自前の個人ブログを作れるようになることを目指します。(記事のボリュームが想像以上に大きくなったので分割する予定です。)\n\n個人ブログや企業のエンジニアブログのようなものを簡単に作ることができます。\n\nmarkdownファイルを、HTMLに変換してWeb上に公開することになるので、サイトのコードと一緒に記事のGit管理を前提とした仕組みになります。\n\n## 技術スタックと開発環境\n\n- Next.js 14系\n- TypeScript 4.4系\n- MDX(markdownをHTML化)\n- Vercel(デプロイサーバー)\n- Macbook Pro Big Sir 11.5.2\n\n## なんで作ったか？\n\n最新技術で日々メンテナンスが出来るものが作りたかったのが大きいかなと思います。\n\n個人ブログのメインユーザーは、自分自身なだけで、エンジニアが作るWebサービスの個人開発にも似たような感覚です。\n\nNext.jsを使って見たかったといえば、それまでですが、SSGなWebサイトは2020年代に入ってから特に注目されている分野ですし、試すなら今！みたいな所もありました。\n\nQiitaやZennもありがたく利用していますが、どうしても\"いいね\"のような数字にとらわれる感じで胃もたれしがちなので、消化の良さそうな個人ブログで胃の中をスッキリさせていこうと思います。\n\n普段はVue.jsを使うことがほとんどなので、React.jsを使うのはどうなの？という点については、全然問題ないです。\n\nドキュメントや先駆者のブログに大体の答えは書いてあります。\n\n## なんでNext.jsにしたのか？\n\n流行りのフレームワークの勉強をしたかった\n\n大きな理由はSSG(Static Site Generation)できるからです。\n\n静的なブログサイトを作るだけのためにSSRやSPAですと、初回レンダリングやSEOに課題があるため(改善方法はありますが)、要件を素早く解消してくれるNext.jsを選定しました。\n\nまたVercelへのデプロイと組み合わせると、Vercelの自動キャッシュ機能を利用することができ、デプロイごとに静的ファイルを自動でキャッシュしてくれます。詳細↓\n\nhttps://vercel.com/docs/edge-network/caching\n\nSSGの場合、初回レンダリングやパフォーマンスの面でも優れています。\n\n軽く、SSGについて整理をします。\n\nSSGの大きな特徴は、予めHTMLをレンダリングしておき、ユーザーからのリクエスト(画面遷移等)に応じて用意しておいたHTMLを返却するだけといったものです。\n\nこれがSSGで無い場合は、ユーザーからのリクエストの度にHTMLを生成して、それを返却する形式になっています。\n\n今回はそのSSGで生成するHTMLを一部、markdownからの変換されたHTMLでレンダリングするようにしています。\n\nブログ記事はmarkdownで記述し、所定のディレクトリに配置するだけでルーティングも良い感じにしてくれる実装を今回はしました。\n\n## watsuyo.devのドメインはどうしたの？\n\ndomain.comで買いました。\n\n欲しいドメイン名は初めから決めていたので、国内外のドメイン販売サービスを比較しながら一番安い所で買いました。\n\nGitHubにmainブランチをPushすると、予め連携しておいたVercelのプロジェクトにDeployされます。\n\n後はVecelとdomain.comにIPアドレスを設定するだけで、watsuyo.devにアクセスできます。\n\n## 本題\n\n### ローカルにプロジェクトを作成する\n\nまずはローカルにNext.jsのプロジェクトを作成します。\n\n今回はTypeScriptを使いたいので、TypeScriptのoptionをつけます。\n\n```bash\n$ yarn create next-app --typescript\n```\n\nデフォルトではpagesディレクトリがsrcディレクトリに入っていないので、srcディレクトリに移動をし、tsconfig.jsにあるエイリアスの設定も変更します。\n\n```json\n\"compilerOptions\": {\n\t\"baseUrl\": \"src\"\n}\n```\n\nsrc以下は、現段階では以下のような構成になります。\n\nsrc配下に配置するかしないかの判断基準は、画面実装に直接関係があるかで判断しています。\n\n```\nsrc\n├── pages\n│   ├── _app.tsx\n│   ├── api\n│   │   └── hello.ts\n│   └── index.tsx\n└── styles\n    ├── Home.module.css\n    └── globals.css\n```\n\n今後、共通コンポーネント作成した時には `components`といったディレクトリ配下にコンポーネントを配置して、`components`もsrc配下に配置するのが妥当かと思います。\n\n以下は、今回の最終目標的な構成になります。\n\n```\nsrc\n├── Head.tsx\n├── components\n│   ├── Footer.tsx\n│   ├── Header.tsx\n│   └── styled\n│       ├── PostContainer.ts\n│       ├── StyledAnchorLink.ts\n│       ├── StyledCard.ts\n│       └── StyledLink.ts\n├── global.ts\n├── logic\n│   ├── getAllPosts.ts\n│   └── style.ts\n├── pages\n│   ├── _app.tsx\n│   ├── _documents.tsx\n│   ├── blog\n│   │   ├── [title].tsx\n│   │   └── sample-blog\n│   │       └── index.mdx\n│   ├── index.tsx\n└── type.ts\n```\n\nプロジェクト作成ができたら\n\n```bash\n$ yarn dev\n```\n\nでローカルサーバーを立ち上げます。\n\n立ち上がったらブラウザで確認してみると、以下のような画面が表示されると思います。\n\n![http://localhost:3000/](https://i.gyazo.com/731048b56c77bb2cc75491013675900a.png)(https://gyazo.com/731048b56c77bb2cc75491013675900a.png)\n\nひとまず、ブログを作る第一歩は完成しました。\n\n適宜、commitをしておきましょう\n\n次はpackageです。\n\n初期の段階で以下のようなpackage.jsonになっていると思うので\n\n```json\n{\n  略\n  \"dependencies\": {\n    \"next\": \"11.1.2\",\n    \"react\": \"17.0.2\",\n    \"react-dom\": \"17.0.2\"\n  },\n  \"devDependencies\": {\n    \"@types/react\": \"17.0.21\",\n    \"eslint\": \"7.32.0\",\n    \"eslint-config-next\": \"11.1.2\",\n    \"typescript\": \"4.4.3\"\n  }\n}\n```\n\n今回の開発で必要になるyarn packageをインストールします。\n\n```json\n{\n　略\n  \"dependencies\": {\n    \"@emotion/styled\": \"^11.3.0\",\n    \"@theme-ui/presets\": \"^0.11.2\",\n    \"front-matter\": \"^4.0.2\",\n    \"gray-matter\": \"^4.0.3\",\n    \"next\": \"11.1.2\",\n    \"next-mdx-enhanced\": \"^5.0.0\",\n    \"next-mdx-remote\": \"^3.0.4\",\n    \"react\": \"17.0.2\",\n    \"react-dom\": \"17.0.2\",\n    \"react-icons\": \"^4.2.0\",\n    \"theme-ui\": \"^0.11.2\"\n  },\n  \"devDependencies\": {\n    \"@types/react\": \"17.0.21\",\n    \"@typescript-eslint/eslint-plugin\": \"^4.30.0\",\n    \"@typescript-eslint/parser\": \"^4.30.0\",\n    \"babel-plugin-emotion\": \"^11.0.0\",\n    \"eslint\": \"^7.32.0\",\n    \"eslint-config-next\": \"11.1.2\",\n    \"eslint-config-prettier\": \"^8.3.0\",\n    \"eslint-plugin-react\": \"^7.25.1\",\n    \"eslint-plugin-react-hooks\": \"^4.2.0\",\n    \"prettier\": \"2.4.1\",\n    \"typescript\": \"4.4.3\"\n  }\n}\n```\n\nmarkdownで書いたブログをHTML化するためにMDX関係のpackageを追加します\n\n```bash\n$ yarn next-mdx-enhanced next-mdx-remote gray-matter\n```\n\n今回は@emotion/styledを使用して、スタイルを当てたいと思います。\n\n```bash\n$ yarn add @emotion/styled\n```\n\n```bash\n$ yarn add -D babel-plugin-emotion\n```\n\nダークモードを実装するために、theme-uiを追加します。\n\n```bash\n$ yarn add theme-ui @theme-ui/presets\n```\n\nReactでiconを使いたいときはiconをコンポーネントとしてimportできる、react-iconsが便利です。\n\n```bash\n$ yarn add react-icons\n```\n\n今回、開発で必要なyarn moduleは以上ですが、お好みでESLintやprettierの設定をすると、開発体験を向上できるかと思います。\n\nmoduleを入れ終わったら再度、yarn devで正しく表示されているかを確認してみましょう。\n\n画面を更新するようなことはしていないと思うので、先ほどと同じ画面が表示されるはずです。\n\n1つの記事で全て書き切ろうと思いましたが、ここまでかなりのボリュームになったので、続きは次回のブログにしようかなと思います。\n\n次は早速、markdownで書いたブログをHTML化して表示させてみます。\n",
            "url": "https://watsuyo.dev/blog/nextjs-mdx-1",
            "title": "Next.jsとMDXで個人ブログを作ってみた",
            "summary": "この記事を読むと誰でも自前の個人ブログを作れるようになることを目指します。(記事のボリュームが想像以上に大きくなったので分割する予定です。)個人ブログや企業のエンジニアブログの...",
            "date_modified": "2021-09-17T15:00:00.000Z",
            "author": {
                "name": "watsuyo",
                "url": "https://twitter.com/watsuyo_2"
            }
        },
        {
            "id": "https://watsuyo.dev/blog/student-engineer",
            "content_html": "\n# 2021年4月に産業技術大学院大学(AIIT)に入学しました🧑‍🎓\n\n## はじめに🎓\n\n2021年4月に産業技術大学院大学(以下 AIIT) 情報アーキテクチャコースに入学し、フルタイムのフロントエンドエンジニアとの2足のわらじを履いています。\n\n既に9月も中旬で、あと3週間で3Qの授業が始まるタイミングになってしまいましたが、個人ブログをNext.js + MDXで実装したタイミングで社会人大学院入学についてエントリを書くことにしました。\n\n理由はわかりませんが今年に入って、社会人のエンジニアで大学や大学院の入試を受けている人が増えているような気がしています。\n\n社会人でも通える大学や大学院がいくつかありますが、これから検討している方の参考になればいいと思います。\n\n## 大学院に通おうと思った理由🏃‍♂️\n\n一番大きいのは、情報系の学位、修士を取得できる部分に大きなメリットを感じたからです。\n\n経営学部出身で独学でエンジニア実務経験も2年が経つタイミングで、そろそろ体系的に学びたいぞ、と思いました。\n\n実務経験は、実績や成果として残すことができますが、資格として認めれられるために取得したいと考えていました。\n\n今後のキャリアを考えると、海外で働くなら実務経験の他に情報系の学位、修士が必要であったり、プログラミングやWebや通信などの技術についてアカデミックに学ぶ機会が、高校3年生の段階で選択できなかった場合に途絶えてしまうのもちょっとつらいところがあります。\n\n英語で授業を受けられる方は、海外に拠点があるオンライン大学を選択肢にいれることもできます。(国内にはないのかな..?)\n\n新型コロナウイルスの影響で、AIITもオンライン授業にシフトしていて、このまま行くと1度も通学せずに卒業になりそうです。\n\n話を戻すと、ライフパス的にも今が学び直す良い機会(20代後半)かなと思い、今後の自分の可能性を広げる意味でも、AIITへの入学を決断しました。\n\n## AIITの情報アーキテクチャコースで学べること👨‍💻\n\n学内には\n- 情報アーキテクチャ\n- 創造技術\n- 事業設計工学\nの3つのコースが用意されています。\n\n各コースのイメージは、ざっくりと↓のような感じです。\n- 情報アーキテクチャコースは、エンジニア向け\n- 創造技術は、デザイナー向け\n- 事業設計工学は、起業したい方、事業をやりたい方向け\n\nもちろんそれぞれのコースには異業界、異業種の方が受講していたり、様々な目的を持っている方もいると思います。\n\nそんな中、卒業単位に含まれるかは別として、多様なコースの授業を受けることが可能な部分も魅力的です。(受けすぎるとそれはそれでキツイ)\n\n授業自体は月曜日から土曜日までの週6日で、カリキュラムの組み方によっては、もうちょっと少なかったりします。\n\nまた、授業は夜間にあるため、授業がある日はエンジニアとして勤務時間は8時半~17時半くらいまで就業し、18時半~21時40分は授業を受けるルーティンになっています。\n\n8月中旬から9月末までは、学生としては夏休み期間でしたが10月から年末年始までは上記のようなルーティンになります。\n\n## 情報系の授業を体系的に受けられる✏️\n\n何かしらの手段で、仕事で使うようなフレームワークやプログラミング言語とは違った技術レイヤーを学びたいと思った時に、社会人大学院の存在を知りました。\n\n2020年1月くらいに、大学院の説明会に行き、その年の12月に社会人特別入試に合格して、翌年4月に入学しました。\n\n他にも社会人向けに展開している大学院は都内にも何個かあるのですが、様々なコースを授業を受けることができる点、都民優遇制度(学費補助など)を含めて都立大学院のため学費が安い点は魅力に映りました。\n\n非情報系や非理系出身エンジニアにとって大きいのは、入試や授業に高度な数学知識を必須にしていない点で、データベースやクラウドインフラ周り、Ruby on RailsやJava、Pythonをアカデミック視点で学べるのも魅力です。\n\n大学院なので2年間で、最後の1年間はPBL(Project Based Learning）科目があります。\n\nちなみに、**情報システム学修士**を取得できます。\n\n専門職大学院という立ち位置なため、座学より実践！なカリキュラムも多い印象です。\n\nそのため、年齢層は創造より+10くらいかもしれません。\n\nそれでも皆、勉強をして自分のキャリアにつなげたいという同じ目標を持っているので、年齢やバックボーンは気になりません。\n\nオンライン授業ということもあって、グループワークで見た目の情報も少ないために変なバイアスがかかることもありません。\n\n## AIIT以外の社会人でも情報系修士を取得できる大学、大学院\n- JAIST(北陸先端科学技術大学院大学)\n  - 正真正銘のコンピューターサイエンスが欲しい方はオススメ\n- Uo People(University of the People)\n  - 英語の授業がOKな方はオンラインで無料で受けられます。\n  - 試験を受けるためにお金がかかります\n- サイバー大学(オンライン)\n  - ソフトバン\n  - クグループが運営しており、福岡を拠点としています\n\nそれ以外にも\n- 帝京大学(オンライン)\n- 電通大(夜間)\nなどがあります。\n\n結構、選択肢が多い印象なので、取得できる学位、修士や学べる内容や通学が必要かなどを照らし合わせながら選ぶと良いかもしれません。\n## 勉強していること\n\nざっと前期に受けた授業を振り返ってみて、\n### 1Q\n\n- 情報セキュリティ特論\n  - 暗号\n  - セキュリティ評価\n- 事業方向性設計特論\n  - 事業ロードマッピング手法\n- プロジェクト管理特論1\n  - PMBOK ガイド\n- Javaプログラミング技法\n- フレームワーク開発特論\n  - Ruby on Rails チュートリアル\n### 2Q\n\n- データベース特論\n  - リレーショナルデータベースの基礎\n\n- 人間中心デザイン特論\n  - HCDの概念\n  - ビジョン構想\n  - ⾏動観察\n\n- システムソフトウェア特論\n  - Unix系OS\n    - OSの仕組み\n    - シェルスクリプトを使った実装\n\n- システムプログラミング特論\n  - Pythonを使った実装\n    - I/O\n    - アルゴリズム\n    - 計算量を考慮した実装\n\nの授業を受けました。\n\n## 最後に\n\n色々書きましたが、授業と業務の両立は、結構大変です。\n\n学ぶ機会を強制的に作れるので、時間とお金があるエンジニアの皆さん、社会人大学院も検討してみるといいかもしれません。\n\n高価な書籍を大学や系列の高専の図書館をレンタルできるのも嬉しい特典の一つです。\n\nAIITや社会人大学院に興味のある方は、[Twitter](https://twitter.com/watsuyo_2)で相談にのるので、ご質問等でもお気軽にDMください👍\n\n大学院のことについては、引き続きこのブログでも発信していきます。\n\nP.S.\nお得な学割サービスを知りたい。。\nNotionとANC(オライリー本読み放題)は登録してます。\n",
            "url": "https://watsuyo.dev/blog/student-engineer",
            "title": "2021年4月に産業技術大学院大学(AIIT)に入学しました🧑‍🎓",
            "summary": "2021年4月に産業技術大学院大学(以下 AIIT) 情報アーキテクチャコースに入学し、フルタイムのフロントエンドエンジニアとの2足のわらじを履いています。既に9月も中旬で、あと3週間で3Qの授業が始まる...",
            "date_modified": "2021-09-10T15:00:00.000Z",
            "author": {
                "name": "watsuyo",
                "url": "https://twitter.com/watsuyo_2"
            }
        }
    ]
}